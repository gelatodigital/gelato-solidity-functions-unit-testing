{
  "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "taskCreator",
          "type": "address"
        }
      ],
      "name": "TaskCancelled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "execAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nonce1Balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onCreateTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_taskId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_taskCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "postExecCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_taskCreator",
          "type": "address"
        }
      ],
      "name": "preCancelTask",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_taskCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_execAddress",
          "type": "address"
        }
      ],
      "name": "preCreateTask",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_execAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_execData",
          "type": "bytes"
        }
      ],
      "name": "preExecCall",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "taskCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LibDataTypes.Module",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "taskModuleAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "timedTask",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "nextExec",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "interval",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5fe42106e243e501315ac56a939c038bff2cb4273e116f3f9cd649ae7908b089",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "transactionIndex": 0,
    "gasUsed": "727315",
    "logsBloom": "0x
    "blockHash": "0x45afb32758f2c4368e6a4d94d9f2a42b365ede2e919886ad8449b5ee568ab258",
    "transactionHash": "0x5fe42106e243e501315ac56a939c038bff2cb4273e116f3f9cd649ae7908b089",
    "logs": [],
    "blockNumber": 24225,
    "cumulativeGasUsed": "727315",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3e732f23068f6192d2fba984e5b4f4ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taskCreator\",\"type\":\"address\"}],\"name\":\"TaskCancelled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"execAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nonce1Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onCreateTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_taskId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_taskCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"postExecCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_taskCreator\",\"type\":\"address\"}],\"name\":\"preCancelTask\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taskCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_execAddress\",\"type\":\"address\"}],\"name\":\"preCreateTask\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_execAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_execData\",\"type\":\"bytes\"}],\"name\":\"preExecCall\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"taskCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LibDataTypes.Module\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"taskModuleAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"timedTask\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"nextExec\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"interval\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"TaskCancelled(bytes32,address)\":{\"params\":{\"taskCreator\":\"The address which owned the task.\",\"taskId\":\"Unique hash of the task. {See LibTaskId-getTaskId}\"}}},\"kind\":\"dev\",\"methods\":{\"onCreateTask(bytes32,address,address,bytes,bytes)\":{\"params\":{\"execAddress\":\"Address of contract that should be called.\",\"execData\":\"Execution data to be called with / function selector if execution data is yet to be determined.\",\"initModuleArg\":\"Encoded arguments for module if any.\",\"taskCreator\":\"The address which created the task.\",\"taskId\":\"Unique hash of the task created.\"}},\"postExecCall(bytes32,address,address,bytes)\":{\"params\":{\"execAddress\":\"Address of contract that should be called.\",\"execData\":\"Execution data to be called with / function selector if execution data is yet to be determined.\",\"taskCreator\":\"The address which created the task.\",\"taskId\":\"Unique hash of the task created.\"}},\"preCancelTask(bytes32,address)\":{\"details\":\"Modules can override taskCreator.\",\"params\":{\"taskCreator\":\"The address which created the task.\",\"taskId\":\"Unique hash of the task created.\"},\"returns\":{\"_0\":\"address Overriden or original taskCreator.\"}},\"preCreateTask(address,address)\":{\"details\":\"Modules can override execAddress or taskCreator. {See ProxyModule-preCreateTask}\",\"params\":{\"execAddress\":\"Address of contract that should be called.\",\"taskCreator\":\"The address which created the task.\"},\"returns\":{\"_0\":\"address Overriden or original taskCreator.\",\"_1\":\"address Overriden or original execAddress.\"}},\"preExecCall(bytes32,address,address,bytes)\":{\"params\":{\"execAddress\":\"Address of contract that should be called.\",\"execData\":\"Execution data to be called with / function selector if execution data is yet to be determined.\",\"taskCreator\":\"The address which created the task.\",\"taskId\":\"Unique hash of the task created.\"},\"returns\":{\"_0\":\"address Overriden or original execution address.\",\"_1\":\"bytes Overriden or original execution data.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"TaskCancelled(bytes32,address)\":{\"notice\":\"Emitted when `cancelTask` is called.\"}},\"kind\":\"user\",\"methods\":{\"onCreateTask(bytes32,address,address,bytes,bytes)\":{\"notice\":\"Initiates task module whenever `createTask` is being called.\"},\"postExecCall(bytes32,address,address,bytes)\":{\"notice\":\"Called during `exec` and after execAddress is called.\"},\"preCancelTask(bytes32,address)\":{\"notice\":\"Called before taskId is removed from _createdTasks[].\"},\"preCreateTask(address,address)\":{\"notice\":\"Called before generating taskId.\"},\"preExecCall(bytes32,address,address,bytes)\":{\"notice\":\"Called during `exec` and before execAddress is called.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/taskModules/SingleExecModule.sol\":\"SingleExecModule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/AutomateStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.12;\\r\\nimport {\\r\\n    EnumerableSet\\r\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport {LibDataTypes} from \\\"./libraries/LibDataTypes.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Storage layout of Automate smart contract.\\r\\n */\\r\\n// solhint-disable max-states-count\\r\\nabstract contract AutomateStorage {\\r\\n    mapping(bytes32 => address) public taskCreator; ///@dev Deprecated\\r\\n    mapping(bytes32 => address) public execAddresses; ///@dev Deprecated\\r\\n    mapping(address => EnumerableSet.Bytes32Set) internal _createdTasks;\\r\\n\\r\\n    uint256 public fee;\\r\\n    address public feeToken;\\r\\n\\r\\n    ///@dev Appended State\\r\\n    mapping(bytes32 => LibDataTypes.Time) public timedTask; ///@dev Deprecated\\r\\n    mapping(LibDataTypes.Module => address) public taskModuleAddresses;\\r\\n    mapping(bytes32 => uint256) public nonce1Balance; ///@dev Deprecated\\r\\n}\\r\\n\",\"keccak256\":\"0x006a8f1e6f6b8e8f4f4cfc49990db99f399b193df049f3b3b835e480fe73be85\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITaskModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n// solhint-disable max-line-length\\r\\ninterface ITaskModule {\\r\\n    /**\\r\\n     * @notice Called before generating taskId.\\r\\n     * @dev Modules can override execAddress or taskCreator. {See ProxyModule-preCreateTask}\\r\\n     *\\r\\n     * @param taskCreator The address which created the task.\\r\\n     * @param execAddress Address of contract that should be called.\\r\\n     *\\r\\n     * @return address Overriden or original taskCreator.\\r\\n     * @return address Overriden or original execAddress.\\r\\n     */\\r\\n    function preCreateTask(address taskCreator, address execAddress)\\r\\n        external\\r\\n        returns (address, address);\\r\\n\\r\\n    /**\\r\\n     * @notice Initiates task module whenever `createTask` is being called.\\r\\n     *\\r\\n     * @param taskId Unique hash of the task created.\\r\\n     * @param taskCreator The address which created the task.\\r\\n     * @param execAddress Address of contract that should be called.\\r\\n     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.\\r\\n     * @param initModuleArg Encoded arguments for module if any.\\r\\n     */\\r\\n    function onCreateTask(\\r\\n        bytes32 taskId,\\r\\n        address taskCreator,\\r\\n        address execAddress,\\r\\n        bytes calldata execData,\\r\\n        bytes calldata initModuleArg\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Called before taskId is removed from _createdTasks[].\\r\\n     * @dev Modules can override taskCreator.\\r\\n     *\\r\\n     * @param taskId Unique hash of the task created.\\r\\n     * @param taskCreator The address which created the task.\\r\\n     *\\r\\n     * @return address Overriden or original taskCreator.\\r\\n     */\\r\\n    function preCancelTask(bytes32 taskId, address taskCreator)\\r\\n        external\\r\\n        returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Called during `exec` and before execAddress is called.\\r\\n     *\\r\\n     * @param taskId Unique hash of the task created.\\r\\n     * @param taskCreator The address which created the task.\\r\\n     * @param execAddress Address of contract that should be called.\\r\\n     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.\\r\\n     *\\r\\n     * @return address Overriden or original execution address.\\r\\n     * @return bytes Overriden or original execution data.\\r\\n     */\\r\\n    function preExecCall(\\r\\n        bytes32 taskId,\\r\\n        address taskCreator,\\r\\n        address execAddress,\\r\\n        bytes calldata execData\\r\\n    ) external returns (address, bytes memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Called during `exec` and after execAddress is called.\\r\\n     *\\r\\n     * @param taskId Unique hash of the task created.\\r\\n     * @param taskCreator The address which created the task.\\r\\n     * @param execAddress Address of contract that should be called.\\r\\n     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.\\r\\n     */\\r\\n    function postExecCall(\\r\\n        bytes32 taskId,\\r\\n        address taskCreator,\\r\\n        address execAddress,\\r\\n        bytes calldata execData\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4b6c96ccd21885c94d07c35560773611d0374fef52edd1c434d5a5285c507325\",\"license\":\"MIT\"},\"contracts/libraries/LibDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n// solhint-disable max-line-length\\r\\nlibrary LibDataTypes {\\r\\n    /**\\r\\n     * @notice Whitelisted modules that are available for users to customise conditions and specifications of their tasks.\\r\\n     *\\r\\n     * @param RESOLVER Use dynamic condition & input data for execution. {See ResolverModule.sol}\\r\\n     * @param DEPRECATED_TIME deprecated\\r\\n     * @param PROXY Creates a dedicated caller (msg.sender) to be used when executing the task. {See ProxyModule.sol}\\r\\n     * @param SINGLE_EXEC Task is cancelled after one execution. {See SingleExecModule.sol}\\r\\n     * @param WEB3_FUNCTION Use off-chain condition & input data for execution. {See Web3FunctionModule.sol}\\r\\n     * @param TRIGGER Repeated execution of task ata a specified timing and interval or cron. {See TriggerModule.sol}\\r\\n     */\\r\\n    enum Module {\\r\\n        RESOLVER,\\r\\n        DEPRECATED_TIME, // @deprecated\\r\\n        PROXY,\\r\\n        SINGLE_EXEC,\\r\\n        WEB3_FUNCTION,\\r\\n        TRIGGER\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Struct to contain modules and their relative arguments that are used for task creation.\\r\\n     *\\r\\n     * @param modules List of selected modules.\\r\\n     * @param args Arguments of modules if any. Pass \\\"0x\\\" for modules which does not require args {See encodeModuleArg}\\r\\n     */\\r\\n    struct ModuleData {\\r\\n        Module[] modules;\\r\\n        bytes[] args;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Struct for time module.\\r\\n     *\\r\\n     * @param nextExec Time when the next execution should occur.\\r\\n     * @param interval Time interval between each execution.\\r\\n     */\\r\\n    struct Time {\\r\\n        uint128 nextExec;\\r\\n        uint128 interval;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Types of trigger\\r\\n     *\\r\\n     * @param TIME Time triggered tasks, starting at a specific time and triggered intervally\\r\\n     * @param CRON Cron triggered tasks, triggered according to the cron conditions\\r\\n     */\\r\\n    enum TriggerType {\\r\\n        TIME,\\r\\n        CRON,\\r\\n        EVENT,\\r\\n        BLOCK\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Struct for trigger module\\r\\n     *\\r\\n     * @param triggerType Type of the trigger\\r\\n     * @param triggerConfig Trigger configuration that shuold be parsed according to triggerType\\r\\n     */\\r\\n    struct TriggerModuleData {\\r\\n        TriggerType triggerType;\\r\\n        bytes triggerConfig;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1ebb4822c20f0455dbef7f4726efb304ca25be1cf8e413964557b332f09d765f\",\"license\":\"MIT\"},\"contracts/libraries/LibEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport {LibDataTypes} from \\\"./LibDataTypes.sol\\\";\\r\\n\\r\\nlibrary LibEvents {\\r\\n    /**\\r\\n     * @notice Emitted when `createTask` is called.\\r\\n     *\\r\\n     * @param taskCreator The address which created the task.\\r\\n     * @param execAddress Address of contract that is called by Gelato.\\r\\n     * @param execDataOrSelector Execution data / function selector.\\r\\n     * @param moduleData Conditional modules used. {See LibDataTypes-ModuleData}\\r\\n     * @param feeToken Token used to pay for the execution. ETH = 0xeeeeee...\\r\\n     * @param taskId Unique hash of the task. {See LibTaskId-getTaskId}\\r\\n     */\\r\\n    event TaskCreated(\\r\\n        address indexed taskCreator,\\r\\n        address indexed execAddress,\\r\\n        bytes execDataOrSelector,\\r\\n        LibDataTypes.ModuleData moduleData,\\r\\n        address feeToken,\\r\\n        bytes32 indexed taskId\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when `cancelTask` is called.\\r\\n     *\\r\\n     * @param taskId Unique hash of the task. {See LibTaskId-getTaskId}\\r\\n     * @param taskCreator The address which owned the task.\\r\\n     */\\r\\n    event TaskCancelled(bytes32 taskId, address taskCreator);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when `exec` is called.\\r\\n     *\\r\\n     * @param txFee Fee paid to Gelato for execution\\r\\n     * @param feeToken Token used to pay for the execution. ETH = 0xeeeeee...\\r\\n     * @param execAddress Address of contract that will be called by Gelato.\\r\\n     * @param execData Execution data / function selector.\\r\\n     * @param taskId Unique hash of the task. {See LibTaskId-getTaskId}\\r\\n     * @param callSuccess Status of the call to execAddress.\\r\\n     */\\r\\n    event ExecSuccess(\\r\\n        uint256 indexed txFee,\\r\\n        address indexed feeToken,\\r\\n        address indexed execAddress,\\r\\n        bytes execData,\\r\\n        bytes32 taskId,\\r\\n        bool callSuccess\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x0d8d703348e36c4c0a8d57e3cf5dafcf0b48c8580d503d6a206c6effe78f90b9\",\"license\":\"MIT\"},\"contracts/taskModules/SingleExecModule.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport {\\r\\n    EnumerableSet\\r\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport {TaskModuleBase} from \\\"./TaskModuleBase.sol\\\";\\r\\nimport {LibEvents} from \\\"../libraries/LibEvents.sol\\\";\\r\\n\\r\\ncontract SingleExecModule is TaskModuleBase {\\r\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\r\\n\\r\\n    /// @inheritdoc TaskModuleBase\\r\\n    function postExecCall(\\r\\n        bytes32 _taskId,\\r\\n        address _taskCreator,\\r\\n        address,\\r\\n        bytes calldata\\r\\n    ) external override {\\r\\n        _createdTasks[_taskCreator].remove(_taskId);\\r\\n\\r\\n        emit LibEvents.TaskCancelled(_taskId, _taskCreator);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc020dfa292058c4b72c004b68625a06d7d79595e87376273a7148dcd7d35523b\",\"license\":\"UNLICENSED\"},\"contracts/taskModules/TaskModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport {AutomateStorage} from \\\"../AutomateStorage.sol\\\";\\r\\nimport {ITaskModule} from \\\"../interfaces/ITaskModule.sol\\\";\\r\\n\\r\\n// solhint-disable no-empty-blocks\\r\\nabstract contract TaskModuleBase is AutomateStorage, ITaskModule {\\r\\n    ///@inheritdoc ITaskModule\\r\\n    function preCreateTask(address _taskCreator, address _execAddress)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        returns (address, address)\\r\\n    {\\r\\n        return (_taskCreator, _execAddress);\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ITaskModule\\r\\n    function onCreateTask(\\r\\n        bytes32,\\r\\n        address,\\r\\n        address,\\r\\n        bytes calldata,\\r\\n        bytes calldata\\r\\n    ) external virtual override {}\\r\\n\\r\\n    ///@inheritdoc ITaskModule\\r\\n    function preCancelTask(bytes32, address _taskCreator)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        return _taskCreator;\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ITaskModule\\r\\n    function preExecCall(\\r\\n        bytes32,\\r\\n        address,\\r\\n        address _execAddress,\\r\\n        bytes calldata _execData\\r\\n    ) external virtual override returns (address, bytes memory) {\\r\\n        return (_execAddress, _execData);\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ITaskModule\\r\\n    function postExecCall(\\r\\n        bytes32 taskId,\\r\\n        address taskCreator,\\r\\n        address execAddress,\\r\\n        bytes calldata execData\\r\\n    ) external virtual override {}\\r\\n}\\r\\n\",\"keccak256\":\"0xdc8701badb493edc5dde2740aa27e6a9a7215724fceb2185412dea5ba11b182e\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c38806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063b0ccbdf011610071578063b0ccbdf0146101c8578063b2db0b41146101e4578063b81cd86614610200578063c10304f714610231578063cd3d4fb914610262578063ddca3f4314610292576100b4565b806314ae9926146100b95780632e6e0bd0146100e9578063647846a5146101195780636d2dd29f1461013757806376474e6a14610167578063ac21631a14610198575b600080fd5b6100d360048036038101906100ce91906106c6565b6102b0565b6040516100e09190610715565b60405180910390f35b61010360048036038101906100fe9190610730565b6102bb565b6040516101109190610715565b60405180910390f35b6101216102ee565b60405161012e9190610715565b60405180910390f35b610151600480360381019061014c9190610730565b610314565b60405161015e9190610715565b60405180910390f35b610181600480360381019061017c919061075d565b610347565b60405161018f92919061079d565b60405180910390f35b6101b260048036038101906101ad9190610730565b610357565b6040516101bf91906107df565b60405180910390f35b6101e260048036038101906101dd919061085f565b61036f565b005b6101fe60048036038101906101f9919061091b565b610378565b005b61021a60048036038101906102159190610730565b61040a565b6040516102289291906109ce565b60405180910390f35b61024b6004803603810190610246919061091b565b610466565b604051610259929190610a87565b60405180910390f35b61027c60048036038101906102779190610adc565b6104c4565b6040516102899190610715565b60405180910390f35b61029a6104f7565b6040516102a791906107df565b60405180910390f35b600081905092915050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808383915091509250929050565b60076020528060005260406000206000915090505481565b50505050505050565b6103c985600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206104fd90919063ffffffff16565b507f44d83729a43f9c6046446df014d073dd242e0ad672071e9b292f31b669c25b0985856040516103fb929190610b18565b60405180910390a15050505050565b60056020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905082565b6000606084848481818080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090509050915091509550959350505050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600061050c8360000183610514565b905092915050565b6000808360010160008481526020019081526020016000205490506000811461061c5760006001826105469190610b70565b905060006001866000018054905061055e9190610b70565b90508082146105cd57600086600001828154811061057f5761057e610ba4565b5b90600052602060002001549050808760000184815481106105a3576105a2610ba4565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806105e1576105e0610bd3565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610622565b60009150505b92915050565b600080fd5b600080fd5b6000819050919050565b61064581610632565b811461065057600080fd5b50565b6000813590506106628161063c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061069382610668565b9050919050565b6106a381610688565b81146106ae57600080fd5b50565b6000813590506106c08161069a565b92915050565b600080604083850312156106dd576106dc610628565b5b60006106eb85828601610653565b92505060206106fc858286016106b1565b9150509250929050565b61070f81610688565b82525050565b600060208201905061072a6000830184610706565b92915050565b60006020828403121561074657610745610628565b5b600061075484828501610653565b91505092915050565b6000806040838503121561077457610773610628565b5b6000610782858286016106b1565b9250506020610793858286016106b1565b9150509250929050565b60006040820190506107b26000830185610706565b6107bf6020830184610706565b9392505050565b6000819050919050565b6107d9816107c6565b82525050565b60006020820190506107f460008301846107d0565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261081f5761081e6107fa565b5b8235905067ffffffffffffffff81111561083c5761083b6107ff565b5b60208301915083600182028301111561085857610857610804565b5b9250929050565b600080600080600080600060a0888a03121561087e5761087d610628565b5b600061088c8a828b01610653565b975050602061089d8a828b016106b1565b96505060406108ae8a828b016106b1565b955050606088013567ffffffffffffffff8111156108cf576108ce61062d565b5b6108db8a828b01610809565b9450945050608088013567ffffffffffffffff8111156108fe576108fd61062d565b5b61090a8a828b01610809565b925092505092959891949750929550565b60008060008060006080868803121561093757610936610628565b5b600061094588828901610653565b9550506020610956888289016106b1565b9450506040610967888289016106b1565b935050606086013567ffffffffffffffff8111156109885761098761062d565b5b61099488828901610809565b92509250509295509295909350565b60006fffffffffffffffffffffffffffffffff82169050919050565b6109c8816109a3565b82525050565b60006040820190506109e360008301856109bf565b6109f060208301846109bf565b9392505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a31578082015181840152602081019050610a16565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a59826109f7565b610a638185610a02565b9350610a73818560208601610a13565b610a7c81610a3d565b840191505092915050565b6000604082019050610a9c6000830185610706565b8181036020830152610aae8184610a4e565b90509392505050565b60068110610ac457600080fd5b50565b600081359050610ad681610ab7565b92915050565b600060208284031215610af257610af1610628565b5b6000610b0084828501610ac7565b91505092915050565b610b1281610632565b82525050565b6000604082019050610b2d6000830185610b09565b610b3a6020830184610706565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b7b826107c6565b9150610b86836107c6565b9250828203905081811115610b9e57610b9d610b41565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212209763915822b48ba7359f32efa3b10e19fce7f478c72d0c2e2041e728ebb51b7464736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063b0ccbdf011610071578063b0ccbdf0146101c8578063b2db0b41146101e4578063b81cd86614610200578063c10304f714610231578063cd3d4fb914610262578063ddca3f4314610292576100b4565b806314ae9926146100b95780632e6e0bd0146100e9578063647846a5146101195780636d2dd29f1461013757806376474e6a14610167578063ac21631a14610198575b600080fd5b6100d360048036038101906100ce91906106c6565b6102b0565b6040516100e09190610715565b60405180910390f35b61010360048036038101906100fe9190610730565b6102bb565b6040516101109190610715565b60405180910390f35b6101216102ee565b60405161012e9190610715565b60405180910390f35b610151600480360381019061014c9190610730565b610314565b60405161015e9190610715565b60405180910390f35b610181600480360381019061017c919061075d565b610347565b60405161018f92919061079d565b60405180910390f35b6101b260048036038101906101ad9190610730565b610357565b6040516101bf91906107df565b60405180910390f35b6101e260048036038101906101dd919061085f565b61036f565b005b6101fe60048036038101906101f9919061091b565b610378565b005b61021a60048036038101906102159190610730565b61040a565b6040516102289291906109ce565b60405180910390f35b61024b6004803603810190610246919061091b565b610466565b604051610259929190610a87565b60405180910390f35b61027c60048036038101906102779190610adc565b6104c4565b6040516102899190610715565b60405180910390f35b61029a6104f7565b6040516102a791906107df565b60405180910390f35b600081905092915050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808383915091509250929050565b60076020528060005260406000206000915090505481565b50505050505050565b6103c985600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206104fd90919063ffffffff16565b507f44d83729a43f9c6046446df014d073dd242e0ad672071e9b292f31b669c25b0985856040516103fb929190610b18565b60405180910390a15050505050565b60056020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905082565b6000606084848481818080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090509050915091509550959350505050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600061050c8360000183610514565b905092915050565b6000808360010160008481526020019081526020016000205490506000811461061c5760006001826105469190610b70565b905060006001866000018054905061055e9190610b70565b90508082146105cd57600086600001828154811061057f5761057e610ba4565b5b90600052602060002001549050808760000184815481106105a3576105a2610ba4565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806105e1576105e0610bd3565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610622565b60009150505b92915050565b600080fd5b600080fd5b6000819050919050565b61064581610632565b811461065057600080fd5b50565b6000813590506106628161063c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061069382610668565b9050919050565b6106a381610688565b81146106ae57600080fd5b50565b6000813590506106c08161069a565b92915050565b600080604083850312156106dd576106dc610628565b5b60006106eb85828601610653565b92505060206106fc858286016106b1565b9150509250929050565b61070f81610688565b82525050565b600060208201905061072a6000830184610706565b92915050565b60006020828403121561074657610745610628565b5b600061075484828501610653565b91505092915050565b6000806040838503121561077457610773610628565b5b6000610782858286016106b1565b9250506020610793858286016106b1565b9150509250929050565b60006040820190506107b26000830185610706565b6107bf6020830184610706565b9392505050565b6000819050919050565b6107d9816107c6565b82525050565b60006020820190506107f460008301846107d0565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261081f5761081e6107fa565b5b8235905067ffffffffffffffff81111561083c5761083b6107ff565b5b60208301915083600182028301111561085857610857610804565b5b9250929050565b600080600080600080600060a0888a03121561087e5761087d610628565b5b600061088c8a828b01610653565b975050602061089d8a828b016106b1565b96505060406108ae8a828b016106b1565b955050606088013567ffffffffffffffff8111156108cf576108ce61062d565b5b6108db8a828b01610809565b9450945050608088013567ffffffffffffffff8111156108fe576108fd61062d565b5b61090a8a828b01610809565b925092505092959891949750929550565b60008060008060006080868803121561093757610936610628565b5b600061094588828901610653565b9550506020610956888289016106b1565b9450506040610967888289016106b1565b935050606086013567ffffffffffffffff8111156109885761098761062d565b5b61099488828901610809565b92509250509295509295909350565b60006fffffffffffffffffffffffffffffffff82169050919050565b6109c8816109a3565b82525050565b60006040820190506109e360008301856109bf565b6109f060208301846109bf565b9392505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a31578082015181840152602081019050610a16565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a59826109f7565b610a638185610a02565b9350610a73818560208601610a13565b610a7c81610a3d565b840191505092915050565b6000604082019050610a9c6000830185610706565b8181036020830152610aae8184610a4e565b90509392505050565b60068110610ac457600080fd5b50565b600081359050610ad681610ab7565b92915050565b600060208284031215610af257610af1610628565b5b6000610b0084828501610ac7565b91505092915050565b610b1281610632565b82525050565b6000604082019050610b2d6000830185610b09565b610b3a6020830184610706565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b7b826107c6565b9150610b86836107c6565b9250828203905081811115610b9e57610b9d610b41565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212209763915822b48ba7359f32efa3b10e19fce7f478c72d0c2e2041e728ebb51b7464736f6c63430008140033",
  "devdoc": {
    "events": {
      "TaskCancelled(bytes32,address)": {
        "params": {
          "taskCreator": "The address which owned the task.",
          "taskId": "Unique hash of the task. {See LibTaskId-getTaskId}"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "onCreateTask(bytes32,address,address,bytes,bytes)": {
        "params": {
          "execAddress": "Address of contract that should be called.",
          "execData": "Execution data to be called with / function selector if execution data is yet to be determined.",
          "initModuleArg": "Encoded arguments for module if any.",
          "taskCreator": "The address which created the task.",
          "taskId": "Unique hash of the task created."
        }
      },
      "postExecCall(bytes32,address,address,bytes)": {
        "params": {
          "execAddress": "Address of contract that should be called.",
          "execData": "Execution data to be called with / function selector if execution data is yet to be determined.",
          "taskCreator": "The address which created the task.",
          "taskId": "Unique hash of the task created."
        }
      },
      "preCancelTask(bytes32,address)": {
        "details": "Modules can override taskCreator.",
        "params": {
          "taskCreator": "The address which created the task.",
          "taskId": "Unique hash of the task created."
        },
        "returns": {
          "_0": "address Overriden or original taskCreator."
        }
      },
      "preCreateTask(address,address)": {
        "details": "Modules can override execAddress or taskCreator. {See ProxyModule-preCreateTask}",
        "params": {
          "execAddress": "Address of contract that should be called.",
          "taskCreator": "The address which created the task."
        },
        "returns": {
          "_0": "address Overriden or original taskCreator.",
          "_1": "address Overriden or original execAddress."
        }
      },
      "preExecCall(bytes32,address,address,bytes)": {
        "params": {
          "execAddress": "Address of contract that should be called.",
          "execData": "Execution data to be called with / function selector if execution data is yet to be determined.",
          "taskCreator": "The address which created the task.",
          "taskId": "Unique hash of the task created."
        },
        "returns": {
          "_0": "address Overriden or original execution address.",
          "_1": "bytes Overriden or original execution data."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "TaskCancelled(bytes32,address)": {
        "notice": "Emitted when `cancelTask` is called."
      }
    },
    "kind": "user",
    "methods": {
      "onCreateTask(bytes32,address,address,bytes,bytes)": {
        "notice": "Initiates task module whenever `createTask` is being called."
      },
      "postExecCall(bytes32,address,address,bytes)": {
        "notice": "Called during `exec` and after execAddress is called."
      },
      "preCancelTask(bytes32,address)": {
        "notice": "Called before taskId is removed from _createdTasks[]."
      },
      "preCreateTask(address,address)": {
        "notice": "Called before generating taskId."
      },
      "preExecCall(bytes32,address,address,bytes)": {
        "notice": "Called during `exec` and before execAddress is called."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2031,
        "contract": "contracts/taskModules/SingleExecModule.sol:SingleExecModule",
        "label": "taskCreator",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2036,
        "contract": "contracts/taskModules/SingleExecModule.sol:SingleExecModule",
        "label": "execAddresses",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2042,
        "contract": "contracts/taskModules/SingleExecModule.sol:SingleExecModule",
        "label": "_createdTasks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)1115_storage)"
      },
      {
        "astId": 2044,
        "contract": "contracts/taskModules/SingleExecModule.sol:SingleExecModule",
        "label": "fee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2046,
        "contract": "contracts/taskModules/SingleExecModule.sol:SingleExecModule",
        "label": "feeToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2052,
        "contract": "contracts/taskModules/SingleExecModule.sol:SingleExecModule",
        "label": "timedTask",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(Time)5134_storage)"
      },
      {
        "astId": 2058,
        "contract": "contracts/taskModules/SingleExecModule.sol:SingleExecModule",
        "label": "taskModuleAddresses",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(Module)5119,t_address)"
      },
      {
        "astId": 2062,
        "contract": "contracts/taskModules/SingleExecModule.sol:SingleExecModule",
        "label": "nonce1Balance",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Module)5119": {
        "encoding": "inplace",
        "label": "enum LibDataTypes.Module",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)1115_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)1115_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(Time)5134_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibDataTypes.Time)",
        "numberOfBytes": "32",
        "value": "t_struct(Time)5134_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Module)5119,t_address)": {
        "encoding": "mapping",
        "key": "t_enum(Module)5119",
        "label": "mapping(enum LibDataTypes.Module => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(Bytes32Set)1115_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 1114,
            "contract": "contracts/taskModules/SingleExecModule.sol:SingleExecModule",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)921_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)921_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 916,
            "contract": "contracts/taskModules/SingleExecModule.sol:SingleExecModule",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 920,
            "contract": "contracts/taskModules/SingleExecModule.sol:SingleExecModule",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Time)5134_storage": {
        "encoding": "inplace",
        "label": "struct LibDataTypes.Time",
        "members": [
          {
            "astId": 5131,
            "contract": "contracts/taskModules/SingleExecModule.sol:SingleExecModule",
            "label": "nextExec",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 5133,
            "contract": "contracts/taskModules/SingleExecModule.sol:SingleExecModule",
            "label": "interval",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}