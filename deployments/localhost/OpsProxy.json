{
  "address": "0x8aAC5570d54306Bb395bf2385ad327b7b706016b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ops",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "ExecuteCall",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_datas",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        }
      ],
      "name": "batchExecuteCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "executeCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ops",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf2d0e6312755381de382026d98326ad1b2e95ce803fa1e99e684dba9bfaacfcb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8aAC5570d54306Bb395bf2385ad327b7b706016b",
    "transactionIndex": 0,
    "gasUsed": "1038471",
    "logsBloom": "0x
    "blockHash": "0xe7b659f80d9e1f384c60a9e85aa3900e14f362762ccc9947859556ca4f93c767",
    "transactionHash": "0xf2d0e6312755381de382026d98326ad1b2e95ce803fa1e99e684dba9bfaacfcb",
    "logs": [],
    "blockNumber": 17982446,
    "cumulativeGasUsed": "1038471",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa85EffB2658CFd81e0B1AaD4f2364CdBCd89F3a1"
  ],
  "numDeployments": 1,
  "solcInputHash": "3e732f23068f6192d2fba984e5b4f4ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ops\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ExecuteCall\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_datas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchExecuteCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"executeCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ops\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"ExecuteCall(address,bytes,uint256,bytes)\":{\"params\":{\"data\":\"Data used in the call.\",\"returnData\":\"Data returned by the call.\",\"target\":\"Address of contract that is called\",\"value\":\"Native token value used in the call.\"}}},\"kind\":\"dev\",\"methods\":{\"batchExecuteCall(address[],bytes[],uint256[])\":{\"params\":{\"datas\":\"Datas for each contract call.\",\"targets\":\"Addresses of contracts to be called.\",\"values\":\"Native token value for each contract call.\"}},\"executeCall(address,bytes,uint256)\":{\"params\":{\"data\":\"Data for contract call.\",\"target\":\"Address of contracts to be called.\",\"value\":\"Native token value for contract call.\"}},\"owner()\":{\"returns\":{\"_0\":\"address Owner of the proxy\"}}},\"stateVariables\":{\"ops\":{\"return\":\"address Ops smart contract address\",\"returns\":{\"_0\":\"address Ops smart contract address\"}},\"version\":{\"return\":\"uint256 version of OpsProxy.\",\"returns\":{\"_0\":\"uint256 version of OpsProxy.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ExecuteCall(address,bytes,uint256,bytes)\":{\"notice\":\"Emitted when proxy calls a contract successfully in `executeCall`\"}},\"kind\":\"user\",\"methods\":{\"batchExecuteCall(address[],bytes[],uint256[])\":{\"notice\":\"Multicall to different contracts with different datas.\"},\"executeCall(address,bytes,uint256)\":{\"notice\":\"Call to a single contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/opsProxy/OpsProxy.sol\":\"OpsProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/functions/FExec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport {GelatoBytes} from \\\"../vendor/gelato/GelatoBytes.sol\\\";\\r\\n\\r\\n// solhint-disable private-vars-leading-underscore\\r\\n// solhint-disable func-visibility\\r\\n\\r\\nfunction _call(\\r\\n    address _add,\\r\\n    bytes memory _data,\\r\\n    uint256 _value,\\r\\n    bool _revertOnFailure,\\r\\n    string memory _tracingInfo\\r\\n) returns (bool success, bytes memory returnData) {\\r\\n    (success, returnData) = _add.call{value: _value}(_data);\\r\\n\\r\\n    if (!success && _revertOnFailure)\\r\\n        GelatoBytes.revertWithError(returnData, _tracingInfo);\\r\\n}\\r\\n\\r\\nfunction _delegateCall(\\r\\n    address _add,\\r\\n    bytes memory _data,\\r\\n    string memory _tracingInfo\\r\\n) returns (bool success, bytes memory returnData) {\\r\\n    (success, returnData) = _add.delegatecall(_data);\\r\\n\\r\\n    if (!success) GelatoBytes.revertWithError(returnData, _tracingInfo);\\r\\n}\\r\\n\",\"keccak256\":\"0x31c112f2617bbae1c33753ff0a3fb9c1524a2083dcfbee2272c8e82e150c14a6\",\"license\":\"MIT\"},\"contracts/interfaces/IOpsProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface IOpsProxy {\\r\\n    /**\\r\\n     * @notice Emitted when proxy calls a contract successfully in `executeCall`\\r\\n     *\\r\\n     * @param target Address of contract that is called\\r\\n     * @param data Data used in the call.\\r\\n     * @param value Native token value used in the call.\\r\\n     * @param returnData Data returned by the call.\\r\\n     */\\r\\n    event ExecuteCall(\\r\\n        address indexed target,\\r\\n        bytes data,\\r\\n        uint256 value,\\r\\n        bytes returnData\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Multicall to different contracts with different datas.\\r\\n     *\\r\\n     * @param targets Addresses of contracts to be called.\\r\\n     * @param datas Datas for each contract call.\\r\\n     * @param values Native token value for each contract call.\\r\\n     */\\r\\n    function batchExecuteCall(\\r\\n        address[] calldata targets,\\r\\n        bytes[] calldata datas,\\r\\n        uint256[] calldata values\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Call to a single contract.\\r\\n     *\\r\\n     * @param target Address of contracts to be called.\\r\\n     * @param data Data for contract call.\\r\\n     * @param value Native token value for contract call.\\r\\n     */\\r\\n    function executeCall(\\r\\n        address target,\\r\\n        bytes calldata data,\\r\\n        uint256 value\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @return address Ops smart contract address\\r\\n     */\\r\\n    function ops() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @return address Owner of the proxy\\r\\n     */\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @return uint256 version of OpsProxy.\\r\\n     */\\r\\n    function version() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x7e9eb4affae088b9ed064d89fb770b1e7abc7510512271e502416457ef22fd3a\",\"license\":\"MIT\"},\"contracts/opsProxy/OpsProxy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport {Proxied} from \\\"../vendor/proxy/EIP173/Proxied.sol\\\";\\r\\nimport {_call} from \\\"../functions/FExec.sol\\\";\\r\\nimport {IOpsProxy} from \\\"../interfaces/IOpsProxy.sol\\\";\\r\\n\\r\\ncontract OpsProxy is Proxied, IOpsProxy {\\r\\n    // solhint-disable const-name-snakecase\\r\\n    uint256 public constant override version = 1;\\r\\n    address public immutable override ops;\\r\\n\\r\\n    modifier onlyAuth() {\\r\\n        address proxyOwner = owner();\\r\\n        if (msg.sender != proxyOwner) {\\r\\n            require(msg.sender == ops, \\\"OpsProxy: Not authorised\\\");\\r\\n            require(\\r\\n                _getTaskCreator() == proxyOwner,\\r\\n                \\\"OpsProxy: Only tasks created by owner\\\"\\r\\n            );\\r\\n        } // else msg.sender == proxyOwner\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // solhint-disable no-empty-blocks\\r\\n    constructor(address _ops) {\\r\\n        ops = _ops;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    ///@inheritdoc IOpsProxy\\r\\n    function batchExecuteCall(\\r\\n        address[] calldata _targets,\\r\\n        bytes[] calldata _datas,\\r\\n        uint256[] calldata _values\\r\\n    ) external payable override onlyAuth {\\r\\n        uint256 length = _targets.length;\\r\\n        require(\\r\\n            length == _datas.length && length == _values.length,\\r\\n            \\\"OpsProxy: Length mismatch\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i; i < length; i++)\\r\\n            _executeCall(_targets[i], _datas[i], _values[i]);\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc IOpsProxy\\r\\n    function executeCall(\\r\\n        address _target,\\r\\n        bytes calldata _data,\\r\\n        uint256 _value\\r\\n    ) external payable override onlyAuth {\\r\\n        _executeCall(_target, _data, _value);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _proxyAdmin();\\r\\n    }\\r\\n\\r\\n    function _executeCall(\\r\\n        address _target,\\r\\n        bytes calldata _data,\\r\\n        uint256 _value\\r\\n    ) private {\\r\\n        (, bytes memory returnData) = _call(\\r\\n            _target,\\r\\n            _data,\\r\\n            _value,\\r\\n            true,\\r\\n            \\\"OpsProxy.executeCall: \\\"\\r\\n        );\\r\\n\\r\\n        emit ExecuteCall(_target, _data, _value, returnData);\\r\\n    }\\r\\n\\r\\n    function _getTaskCreator() private pure returns (address taskCreator) {\\r\\n        assembly {\\r\\n            taskCreator := shr(96, calldataload(sub(calldatasize(), 20)))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1c119665788726742bd07f553c508baa437646b84ccf9aa05abeddbf1829c1fe\",\"license\":\"UNLICENSED\"},\"contracts/vendor/gelato/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nlibrary GelatoBytes {\\r\\n    function calldataSliceSelector(bytes calldata _bytes)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes4 selector)\\r\\n    {\\r\\n        selector =\\r\\n            _bytes[0] |\\r\\n            (bytes4(_bytes[1]) >> 8) |\\r\\n            (bytes4(_bytes[2]) >> 16) |\\r\\n            (bytes4(_bytes[3]) >> 24);\\r\\n    }\\r\\n\\r\\n    function memorySliceSelector(bytes memory _bytes)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes4 selector)\\r\\n    {\\r\\n        selector =\\r\\n            _bytes[0] |\\r\\n            (bytes4(_bytes[1]) >> 8) |\\r\\n            (bytes4(_bytes[2]) >> 16) |\\r\\n            (bytes4(_bytes[3]) >> 24);\\r\\n    }\\r\\n\\r\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\r\\n        internal\\r\\n        pure\\r\\n    {\\r\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\r\\n        if (_bytes.length % 32 == 4) {\\r\\n            bytes4 selector;\\r\\n            assembly {\\r\\n                selector := mload(add(0x20, _bytes))\\r\\n            }\\r\\n            if (selector == 0x08c379a0) {\\r\\n                // Function selector for Error(string)\\r\\n                assembly {\\r\\n                    _bytes := add(_bytes, 68)\\r\\n                }\\r\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\r\\n            } else {\\r\\n                revert(\\r\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\r\\n                );\\r\\n            }\\r\\n        } else {\\r\\n            revert(\\r\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\r\\n        if (_bytes.length % 32 == 4) {\\r\\n            bytes4 selector;\\r\\n            assembly {\\r\\n                selector := mload(add(0x20, _bytes))\\r\\n            }\\r\\n            if (selector == 0x08c379a0) {\\r\\n                // Function selector for Error(string)\\r\\n                assembly {\\r\\n                    _bytes := add(_bytes, 68)\\r\\n                }\\r\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\r\\n            } else {\\r\\n                return\\r\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\r\\n            }\\r\\n        } else {\\r\\n            return\\r\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x57e6b72bd56b8a13f5596281b57b62c6dbb4ad77e240ad134d3d93ba5acabcf2\",\"license\":\"UNLICENSED\"},\"contracts/vendor/proxy/EIP173/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nabstract contract Proxied {\\r\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\r\\n    /// It also allows these functions to be called inside a contructor\\r\\n    /// even if the contract is meant to be used without proxy\\r\\n    modifier proxied() {\\r\\n        address proxyAdminAddress = _proxyAdmin();\\r\\n        // With hardhat-deploy proxies\\r\\n        // the proxyAdminAddress is zero only for the implementation contract\\r\\n        // if the implementation contract want to be used as a standalone/immutable contract\\r\\n        // it simply has to execute the `proxied` function\\r\\n        // This ensure the proxyAdminAddress is never zero post deployment\\r\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\r\\n        if (proxyAdminAddress == address(0)) {\\r\\n            // ensure can not be called twice when used outside of proxy : no admin\\r\\n            // solhint-disable-next-line security/no-inline-assembly\\r\\n            assembly {\\r\\n                sstore(\\r\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\r\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\r\\n                )\\r\\n            }\\r\\n        } else {\\r\\n            require(msg.sender == proxyAdminAddress);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyProxyAdmin() {\\r\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _proxyAdmin() internal view returns (address adminAddress) {\\r\\n        // solhint-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            adminAddress := sload(\\r\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa6a0072ee226bfbab2760c3363a20219128a41a903c37d43baac9e6e9f9bab31\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200130e3803806200130e8339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b6080516111d66200013860003960008181610154015281816102be01526104b501526111d66000f3fe60806040526004361061004e5760003560e01c806354132d781461005a57806354fd4d50146100765780638da5cb5b146100a1578063c0e8c0c2146100cc578063e70abe92146100e857610055565b3661005557005b600080fd5b610074600480360381019061006f91906108fa565b610113565b005b34801561008257600080fd5b5061008b610269565b604051610098919061097d565b60405180910390f35b3480156100ad57600080fd5b506100b661026e565b6040516100c391906109a7565b60405180910390f35b6100e660048036038101906100e19190610ac4565b61027d565b005b3480156100f457600080fd5b506100fd6104b3565b60405161010a91906109a7565b60405180910390f35b600061011d61026e565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610256577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d790610bd5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166101ff6104d7565b73ffffffffffffffffffffffffffffffffffffffff1614610255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024c90610c67565b60405180910390fd5b5b610262858585856104e6565b5050505050565b600181565b60006102786105cd565b905090565b600061028761026e565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c0577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461034a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034190610bd5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166103696104d7565b73ffffffffffffffffffffffffffffffffffffffff16146103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b690610c67565b60405180910390fd5b5b600087879050905085859050811480156103dc57508383905081145b61041b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041290610cd3565b60405180910390fd5b60005b818110156104a85761049589898381811061043c5761043b610cf3565b5b90506020020160208101906104519190610d22565b88888481811061046457610463610cf3565b5b90506020028101906104769190610d5e565b88888681811061048957610488610cf3565b5b905060200201356104e6565b80806104a090610df0565b91505061041e565b505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000601436033560601c905090565b600061056f8585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508460016040518060400160405280601681526020017f4f707350726f78792e6578656375746543616c6c3a20000000000000000000008152506105f6565b9150508473ffffffffffffffffffffffffffffffffffffffff167f8f8f4d49bbb03ffac818a5d588ec1786a4d2d17269871cbf5b1745f58b64c15d858585856040516105be9493929190610f04565b60405180910390a25050505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516106209190610f87565b60006040518083038185875af1925050503d806000811461065d576040519150601f19603f3d011682016040523d82523d6000602084013e610662565b606091505b508092508193505050811580156106765750835b15610686576106858184610690565b5b9550959350505050565b6004602083516106a09190610fcd565b0361079b576000826020015190506308c379a060e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19160361073f5760448301925081836040516020016106f4929190611045565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073691906110a2565b60405180910390fd5b816040516020016107509190611110565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079291906110a2565b60405180910390fd5b806040516020016107ac919061117e565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ee91906110a2565b60405180910390fd5b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061082c82610801565b9050919050565b61083c81610821565b811461084757600080fd5b50565b60008135905061085981610833565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126108845761088361085f565b5b8235905067ffffffffffffffff8111156108a1576108a0610864565b5b6020830191508360018202830111156108bd576108bc610869565b5b9250929050565b6000819050919050565b6108d7816108c4565b81146108e257600080fd5b50565b6000813590506108f4816108ce565b92915050565b60008060008060608587031215610914576109136107f7565b5b60006109228782880161084a565b945050602085013567ffffffffffffffff811115610943576109426107fc565b5b61094f8782880161086e565b93509350506040610962878288016108e5565b91505092959194509250565b610977816108c4565b82525050565b6000602082019050610992600083018461096e565b92915050565b6109a181610821565b82525050565b60006020820190506109bc6000830184610998565b92915050565b60008083601f8401126109d8576109d761085f565b5b8235905067ffffffffffffffff8111156109f5576109f4610864565b5b602083019150836020820283011115610a1157610a10610869565b5b9250929050565b60008083601f840112610a2e57610a2d61085f565b5b8235905067ffffffffffffffff811115610a4b57610a4a610864565b5b602083019150836020820283011115610a6757610a66610869565b5b9250929050565b60008083601f840112610a8457610a8361085f565b5b8235905067ffffffffffffffff811115610aa157610aa0610864565b5b602083019150836020820283011115610abd57610abc610869565b5b9250929050565b60008060008060008060608789031215610ae157610ae06107f7565b5b600087013567ffffffffffffffff811115610aff57610afe6107fc565b5b610b0b89828a016109c2565b9650965050602087013567ffffffffffffffff811115610b2e57610b2d6107fc565b5b610b3a89828a01610a18565b9450945050604087013567ffffffffffffffff811115610b5d57610b5c6107fc565b5b610b6989828a01610a6e565b92509250509295509295509295565b600082825260208201905092915050565b7f4f707350726f78793a204e6f7420617574686f72697365640000000000000000600082015250565b6000610bbf601883610b78565b9150610bca82610b89565b602082019050919050565b60006020820190508181036000830152610bee81610bb2565b9050919050565b7f4f707350726f78793a204f6e6c79207461736b7320637265617465642062792060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000610c51602583610b78565b9150610c5c82610bf5565b604082019050919050565b60006020820190508181036000830152610c8081610c44565b9050919050565b7f4f707350726f78793a204c656e677468206d69736d6174636800000000000000600082015250565b6000610cbd601983610b78565b9150610cc882610c87565b602082019050919050565b60006020820190508181036000830152610cec81610cb0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610d3857610d376107f7565b5b6000610d468482850161084a565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610d7b57610d7a610d4f565b5b80840192508235915067ffffffffffffffff821115610d9d57610d9c610d54565b5b602083019250600182023603831315610db957610db8610d59565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dfb826108c4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e2d57610e2c610dc1565b5b600182019050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610e758385610e38565b9350610e82838584610e49565b610e8b83610e58565b840190509392505050565b600081519050919050565b60005b83811015610ebf578082015181840152602081019050610ea4565b60008484015250505050565b6000610ed682610e96565b610ee08185610e38565b9350610ef0818560208601610ea1565b610ef981610e58565b840191505092915050565b60006060820190508181036000830152610f1f818688610e69565b9050610f2e602083018561096e565b8181036040830152610f408184610ecb565b905095945050505050565b600081905092915050565b6000610f6182610e96565b610f6b8185610f4b565b9350610f7b818560208601610ea1565b80840191505092915050565b6000610f938284610f56565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fd8826108c4565b9150610fe3836108c4565b925082610ff357610ff2610f9e565b5b828206905092915050565b600081519050919050565b600081905092915050565b600061101f82610ffe565b6110298185611009565b9350611039818560208601610ea1565b80840191505092915050565b60006110518285611014565b915061105d8284611014565b91508190509392505050565b600061107482610ffe565b61107e8185610b78565b935061108e818560208601610ea1565b61109781610e58565b840191505092915050565b600060208201905081810360008301526110bc8184611069565b905092915050565b7f4e6f4572726f7253656c6563746f720000000000000000000000000000000000600082015250565b60006110fa600f83611009565b9150611105826110c4565b600f82019050919050565b600061111c8284611014565b9150611127826110ed565b915081905092915050565b7f556e657870656374656452657475726e64617461000000000000000000000000600082015250565b6000611168601483611009565b915061117382611132565b601482019050919050565b600061118a8284611014565b91506111958261115b565b91508190509291505056fea264697066735822122072c4ab0d61537a4b65ea8d97621dfcb689a08e14c3cab5f8058886532855e47364736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061004e5760003560e01c806354132d781461005a57806354fd4d50146100765780638da5cb5b146100a1578063c0e8c0c2146100cc578063e70abe92146100e857610055565b3661005557005b600080fd5b610074600480360381019061006f91906108fa565b610113565b005b34801561008257600080fd5b5061008b610269565b604051610098919061097d565b60405180910390f35b3480156100ad57600080fd5b506100b661026e565b6040516100c391906109a7565b60405180910390f35b6100e660048036038101906100e19190610ac4565b61027d565b005b3480156100f457600080fd5b506100fd6104b3565b60405161010a91906109a7565b60405180910390f35b600061011d61026e565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610256577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d790610bd5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166101ff6104d7565b73ffffffffffffffffffffffffffffffffffffffff1614610255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024c90610c67565b60405180910390fd5b5b610262858585856104e6565b5050505050565b600181565b60006102786105cd565b905090565b600061028761026e565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c0577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461034a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034190610bd5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166103696104d7565b73ffffffffffffffffffffffffffffffffffffffff16146103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b690610c67565b60405180910390fd5b5b600087879050905085859050811480156103dc57508383905081145b61041b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041290610cd3565b60405180910390fd5b60005b818110156104a85761049589898381811061043c5761043b610cf3565b5b90506020020160208101906104519190610d22565b88888481811061046457610463610cf3565b5b90506020028101906104769190610d5e565b88888681811061048957610488610cf3565b5b905060200201356104e6565b80806104a090610df0565b91505061041e565b505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000601436033560601c905090565b600061056f8585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508460016040518060400160405280601681526020017f4f707350726f78792e6578656375746543616c6c3a20000000000000000000008152506105f6565b9150508473ffffffffffffffffffffffffffffffffffffffff167f8f8f4d49bbb03ffac818a5d588ec1786a4d2d17269871cbf5b1745f58b64c15d858585856040516105be9493929190610f04565b60405180910390a25050505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516106209190610f87565b60006040518083038185875af1925050503d806000811461065d576040519150601f19603f3d011682016040523d82523d6000602084013e610662565b606091505b508092508193505050811580156106765750835b15610686576106858184610690565b5b9550959350505050565b6004602083516106a09190610fcd565b0361079b576000826020015190506308c379a060e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19160361073f5760448301925081836040516020016106f4929190611045565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073691906110a2565b60405180910390fd5b816040516020016107509190611110565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079291906110a2565b60405180910390fd5b806040516020016107ac919061117e565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ee91906110a2565b60405180910390fd5b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061082c82610801565b9050919050565b61083c81610821565b811461084757600080fd5b50565b60008135905061085981610833565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126108845761088361085f565b5b8235905067ffffffffffffffff8111156108a1576108a0610864565b5b6020830191508360018202830111156108bd576108bc610869565b5b9250929050565b6000819050919050565b6108d7816108c4565b81146108e257600080fd5b50565b6000813590506108f4816108ce565b92915050565b60008060008060608587031215610914576109136107f7565b5b60006109228782880161084a565b945050602085013567ffffffffffffffff811115610943576109426107fc565b5b61094f8782880161086e565b93509350506040610962878288016108e5565b91505092959194509250565b610977816108c4565b82525050565b6000602082019050610992600083018461096e565b92915050565b6109a181610821565b82525050565b60006020820190506109bc6000830184610998565b92915050565b60008083601f8401126109d8576109d761085f565b5b8235905067ffffffffffffffff8111156109f5576109f4610864565b5b602083019150836020820283011115610a1157610a10610869565b5b9250929050565b60008083601f840112610a2e57610a2d61085f565b5b8235905067ffffffffffffffff811115610a4b57610a4a610864565b5b602083019150836020820283011115610a6757610a66610869565b5b9250929050565b60008083601f840112610a8457610a8361085f565b5b8235905067ffffffffffffffff811115610aa157610aa0610864565b5b602083019150836020820283011115610abd57610abc610869565b5b9250929050565b60008060008060008060608789031215610ae157610ae06107f7565b5b600087013567ffffffffffffffff811115610aff57610afe6107fc565b5b610b0b89828a016109c2565b9650965050602087013567ffffffffffffffff811115610b2e57610b2d6107fc565b5b610b3a89828a01610a18565b9450945050604087013567ffffffffffffffff811115610b5d57610b5c6107fc565b5b610b6989828a01610a6e565b92509250509295509295509295565b600082825260208201905092915050565b7f4f707350726f78793a204e6f7420617574686f72697365640000000000000000600082015250565b6000610bbf601883610b78565b9150610bca82610b89565b602082019050919050565b60006020820190508181036000830152610bee81610bb2565b9050919050565b7f4f707350726f78793a204f6e6c79207461736b7320637265617465642062792060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000610c51602583610b78565b9150610c5c82610bf5565b604082019050919050565b60006020820190508181036000830152610c8081610c44565b9050919050565b7f4f707350726f78793a204c656e677468206d69736d6174636800000000000000600082015250565b6000610cbd601983610b78565b9150610cc882610c87565b602082019050919050565b60006020820190508181036000830152610cec81610cb0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610d3857610d376107f7565b5b6000610d468482850161084a565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610d7b57610d7a610d4f565b5b80840192508235915067ffffffffffffffff821115610d9d57610d9c610d54565b5b602083019250600182023603831315610db957610db8610d59565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dfb826108c4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e2d57610e2c610dc1565b5b600182019050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610e758385610e38565b9350610e82838584610e49565b610e8b83610e58565b840190509392505050565b600081519050919050565b60005b83811015610ebf578082015181840152602081019050610ea4565b60008484015250505050565b6000610ed682610e96565b610ee08185610e38565b9350610ef0818560208601610ea1565b610ef981610e58565b840191505092915050565b60006060820190508181036000830152610f1f818688610e69565b9050610f2e602083018561096e565b8181036040830152610f408184610ecb565b905095945050505050565b600081905092915050565b6000610f6182610e96565b610f6b8185610f4b565b9350610f7b818560208601610ea1565b80840191505092915050565b6000610f938284610f56565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fd8826108c4565b9150610fe3836108c4565b925082610ff357610ff2610f9e565b5b828206905092915050565b600081519050919050565b600081905092915050565b600061101f82610ffe565b6110298185611009565b9350611039818560208601610ea1565b80840191505092915050565b60006110518285611014565b915061105d8284611014565b91508190509392505050565b600061107482610ffe565b61107e8185610b78565b935061108e818560208601610ea1565b61109781610e58565b840191505092915050565b600060208201905081810360008301526110bc8184611069565b905092915050565b7f4e6f4572726f7253656c6563746f720000000000000000000000000000000000600082015250565b60006110fa600f83611009565b9150611105826110c4565b600f82019050919050565b600061111c8284611014565b9150611127826110ed565b915081905092915050565b7f556e657870656374656452657475726e64617461000000000000000000000000600082015250565b6000611168601483611009565b915061117382611132565b601482019050919050565b600061118a8284611014565b91506111958261115b565b91508190509291505056fea264697066735822122072c4ab0d61537a4b65ea8d97621dfcb689a08e14c3cab5f8058886532855e47364736f6c63430008140033",
  "devdoc": {
    "events": {
      "ExecuteCall(address,bytes,uint256,bytes)": {
        "params": {
          "data": "Data used in the call.",
          "returnData": "Data returned by the call.",
          "target": "Address of contract that is called",
          "value": "Native token value used in the call."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "batchExecuteCall(address[],bytes[],uint256[])": {
        "params": {
          "datas": "Datas for each contract call.",
          "targets": "Addresses of contracts to be called.",
          "values": "Native token value for each contract call."
        }
      },
      "executeCall(address,bytes,uint256)": {
        "params": {
          "data": "Data for contract call.",
          "target": "Address of contracts to be called.",
          "value": "Native token value for contract call."
        }
      },
      "owner()": {
        "returns": {
          "_0": "address Owner of the proxy"
        }
      }
    },
    "stateVariables": {
      "ops": {
        "return": "address Ops smart contract address",
        "returns": {
          "_0": "address Ops smart contract address"
        }
      },
      "version": {
        "return": "uint256 version of OpsProxy.",
        "returns": {
          "_0": "uint256 version of OpsProxy."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ExecuteCall(address,bytes,uint256,bytes)": {
        "notice": "Emitted when proxy calls a contract successfully in `executeCall`"
      }
    },
    "kind": "user",
    "methods": {
      "batchExecuteCall(address[],bytes[],uint256[])": {
        "notice": "Multicall to different contracts with different datas."
      },
      "executeCall(address,bytes,uint256)": {
        "notice": "Call to a single contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}